# following commands that local computer will have to run (in order)
#1. Command to create stack:
# aws cloudformation create-stack --stack-name NewStackName --template-body file://path/to/your/existing-template.yaml --region us-west-2
# 2. Command that will upload local csv file onto existing s3 bucket
# aws s3 cp /path/to/your/csvfile.csv s3://your-existing-bucket-name/csvfile.csv

# local computer will need credentials to run above

# template plans:
# 1. contains services that will run once and will stay; includes: output s3 bucket, security group, iam roles, input bucket
# 2. contains services that will run everytime; includes: ec2 instance

# to-do:
#EC2 launch role
#add a security group
#vpc and subnet id
#service catalog vpc
#multiple parameters
#parameters use default or json file in CLI

Resources:
  # Bucket policies and IAM roles
  InputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InputS3BucketPOC2023
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: arn:aws:s3:::csm-match-mock-data/*
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !GetAtt MyLambdaFunction.Arn

  OutputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OutputS3BucketPOC2023
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: arn:aws:s3:::csm-match-mock-data-matched/*
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-Instance-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: EC2S3AccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - arn:aws:s3:::csm-match-mock-data/*
              - Effect: Allow
                Action: s3:PutObject
                Resource: arn:aws:s3:::csm-match-mock-data-matched/*
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                Resource: "*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Execution-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: s3-trigger-cf-lam-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::csm-match-mock-data
                  - arn:aws:s3:::csm-match-mock-data/*
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                Resource: "*"
              - Effect: Allow
                Action: s3:PutObject
                Resource:
                  - arn:aws:s3:::csm-match-mock-data-matched

  # S3 buckets (input and output)
  InputS3BucketPOC2023: # have object (csv file) delete after we get output csv in output bucket
    Type: AWS::S3::Bucket
    Properties:
      BucketName: csm-match-mock-data
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt MyLambdaFunction.Arn
            Event: "s3:ObjectCreated:*"

  OutputS3BucketPOC2023:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: csm-match-mock-data-matched

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def lambda_handler(event, context):
              # Parse event data
              s3_event = event['Records'][0]['s3']
              print("s3event: " + s3_event)
              bucket_name = s3_event['bucket']['name']
              print("bucketname: " + bucket_name)
              object_key = s3_event['object']['key']
              print("objectkey: " + object_key)

              # Specify the CloudFormation template URL
              cloudformation_template_url = "https://lambda-store-bucket-poc-2023.s3.us-west-2.amazonaws.com/POCTemplate2AmazonLinux.yml"

              # Launch CloudFormation stack
              cloudformation_client = boto3.client('cloudformation')
              response = cloudformation_client.create_stack(
                  StackName='POCTemplate2AmazonLinux.yml',
                  TemplateURL=cloudformation_template_url,
              )

              return {
                  'statusCode': 200,
                  'body': 'Stack creation initiated'
              }

      Handler: POCLambda.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8

      # LifecycleConfiguration:
      #   Rules:
      #     - Id: Retain3Days
      #       Status: Enabled
      #       ExpirationInDays: 3
# following commands that local computer will have to run (in order)
#1. Command to create stack:
# aws cloudformation create-stack --stack-name NewStackName --template-body file://path/to/your/existing-template.yaml --region us-west-2
# 2. Command that will upload local csv file onto existing s3 bucket
# aws s3 cp /path/to/your/csvfile.csv s3://your-existing-bucket-name/csvfile.csv

# local computer will need credentials to run above

# template plans:
# 1. contains services that will run once and will stay; includes: output s3 bucket, security group, iam roles, input bucket
# 2. contains services that will run everytime; includes: ec2 instance

# to-do:
#EC2 launch role
#add a security group
#vpc and subnet id
#service catalog vpc
#multiple parameters
#parameters use default or json file in CLI

# Resources:
#   # Bucket policies and IAM roles
#   InputS3BucketPolicy:
#     Type: AWS::S3::BucketPolicy
#     Properties:
#       Bucket: !Ref InputS3BucketPOC2023
#       PolicyDocument:
#         Statement:
#           - Action: s3:GetObject
#             Effect: Allow
#             Resource: arn:aws:s3:::csm-match-mock-data/*
#             Principal:
#               Service: ec2.amazonaws.com

#   OutputS3BucketPolicy:
#     Type: AWS::S3::BucketPolicy
#     Properties:
#       Bucket: !Ref OutputS3BucketPOC2023
#       PolicyDocument:
#         Statement:
#           - Action: s3:PutObject
#             Effect: Allow
#             Resource: arn:aws:s3:::csm-match-mock-data-matched/*
#             Principal:
#               Service: ec2.amazonaws.com

#   EC2InstanceRole:
#     Type: AWS::IAM::Role
#     Properties:
#       RoleName: EC2-Instance-Role-POC-US-WEST-2
#       AssumeRolePolicyDocument:
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service: ec2.amazonaws.com
#             Action: sts:AssumeRole
#       ManagedPolicyArns:
#         - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
#         - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
#       Policies:
#         - PolicyName: EC2S3AccessPolicy
#           PolicyDocument:
#             Statement:
#               - Effect: Allow
#                 Action: s3:GetObject
#                 Resource:
#                   - arn:aws:s3:::csm-match-mock-data/*
#               - Effect: Allow
#                 Action: s3:PutObject
#                 Resource: arn:aws:s3:::csm-match-mock-data-matched/*
#         - PolicyName: SecretsManagerAccess
#           PolicyDocument:
#             Statement:
#               - Effect: Allow
#                 Action:
#                   - "secretsmanager:GetSecretValue"
#                   - "secretsmanager:DescribeSecret"
#                 Resource: "*"

#   # S3 buckets (input and output)
#   InputS3BucketPOC2023: # have object (csv file) delete after we get output csv in output bucket; therefore
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: csm-match-mock-data

#   OutputS3BucketPOC2023:
#     Type: AWS::S3::Bucket
#     Properties:
#       BucketName: csm-match-mock-data-matched
#       # NotificationConfiguration:
#       #   LambdaConfigurations:
#       #     - Event: 's3:ObjectCreated:*'
#       #       Function: !GetAtt MyLambdaFunction.Arn
#       # LifecycleConfiguration:
#       #   Rules:
#       #     - Id: Retain3Days
#       #       Status: Enabled
#       #       ExpirationInDays: 3
