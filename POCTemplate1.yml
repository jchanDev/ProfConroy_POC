# following commands that local computer will have to run (in order)
#1. Command to create stack:
# aws cloudformation create-stack --stack-name NewStackName --template-body file://path/to/your/existing-template.yaml --region us-west-2
# 2. Command that will upload local csv file onto existing s3 bucket
# aws s3 cp /path/to/your/csvfile.csv s3://your-existing-bucket-name/csvfile.csv

# local computer will need credentials to run above

# template plans:
# 1. contains services that will run once and will stay; includes: output s3 bucket, security group, iam roles, input bucket
# 2. contains services that will run everytime; includes: ec2 instance

# to-do:
#EC2 launch role
#add a security group
#vpc and subnet id
#service catalog vpc
#multiple parameters
#parameters use default or json file in CLI

Resources:
  # Bucket policies and IAM roles
  InputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InputS3BucketPOC2023
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: arn:aws:s3:::csm-match-mock-data/*
            Principal:
              Service: ec2.amazonaws.com

  OutputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OutputS3BucketPOC2023
      PolicyDocument:
        Statement:
          - Action: s3:PutObject
            Effect: Allow
            Resource: arn:aws:s3:::csm-match-mock-data-matched/*
            Principal:
              Service: ec2.amazonaws.com

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-Instance-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: EC2S3AccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - arn:aws:s3:::csm-match-mock-data/*
              - Effect: Allow
                Action: s3:PutObject
                Resource: arn:aws:s3:::csm-match-mock-data-matched/*
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                Resource: "*"

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-Execution-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaS3toCFPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - arn:aws:s3:::csm-match-mock-data
                  - arn:aws:s3:::csm-match-mock-data/*
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                Resource: '*'
                
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: lambda-store-bucket-poc-2023
        S3Key: POCLambda.zip # replace with whatever we put in input bucket to hold lambda func
      Handler: POCLambda.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8

  # S3 buckets (input and output)
  InputS3BucketPOC2023: # have object (csv file) delete after we get output csv in output bucket; therefore
    Type: AWS::S3::Bucket
    Properties:
      BucketName: csm-match-mock-data

  OutputS3BucketPOC2023:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: csm-match-mock-data-matched
      # NotificationConfiguration:
      #   LambdaConfigurations:
      #     - Event: 's3:ObjectCreated:*'
      #       Function: !GetAtt MyLambdaFunction.Arn
      # LifecycleConfiguration:
      #   Rules:
      #     - Id: Retain3Days
      #       Status: Enabled
      #       ExpirationInDays: 3