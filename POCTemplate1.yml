# following commands that local computer will have to run (in order)
#1. Command to create stack:
# aws cloudformation create-stack --stack-name NewStackName --template-body file://path/to/your/existing-template.yaml --region us-west-2
# 2. Command that will upload local csv file onto existing s3 bucket
# aws s3 cp /path/to/your/csvfile.csv s3://your-existing-bucket-name/csvfile.csv

# local computer will need credentials to run above

# template plans:
# 1. contains services that will run once and will stay; includes: output s3 bucket, security group, iam roles, input bucket
# 2. contains services that will run everytime; includes: ec2 instance

# to-do:
#EC2 launch role
#add a security group
#vpc and subnet id
#service catalog vpc
#multiple parameters
#parameters use default or json file in CLI

Resources:
  Input-S3-Bucket-POC2023:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: csm-match-mock-data
    DeletionPolicy: Delete
    Region: us-west-2

  InputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Input-S3-Bucket-POC2023
      Statement:
        Action: s3:GetObject
        Effect: Allow
        Resource: !Sub arn:aws:s3:::${Input-S3-Bucket-POC2023}/*
        Principal:
          Service: ec2.amazonaws.com

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EC2S3AccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${Input-S3-Bucket-POC2023}/*
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::${Output-S3-Bucket-POC2023}/*

  Output-S3-Bucket-POC2023:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: csm-match-mock-data-matched
    DeletionPolicy: Retain
    Region: us-west-2

  OutputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Output-S3-Bucket-POC2023
      Statement:
        Action: s3:PutObject
        Effect: Allow
        Resource: !Sub arn:aws:s3:::${Output-S3-Bucket-POC2023}/*
        Principal:
          Service: ec2.amazonaws.com
  
  MyLifecycleConfiguration:
    Type: AWS::S3::BucketLifecycleConfiguration
    Properties:
      Bucket: !Ref Output-S3-Bucket-POC2023
      LifecycleConfiguration:
        Rules:
          - Id: Retain3Days
            Status: Enabled
            ExpirationInDays: 3

  # based on how many times we think the instance will have to run per quarter
  # option 1: to have instance terminate each time so bash runs everytime
  # option 2: find a way for instance to re-run userdata bash script w/o termination
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My EC2 instance security group
      VpcId: 'vpc-00b9bd3a6d70475f1'
      # security group still needs to be completed!!
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      SubnetId: 'subnet-09c627ce914a28786'
      SecurityGroupIds:
      - !Ref MySecurityGroup
      UserData:
      #use aws s3 cp s3://bucketname/filename /path/to/file to get files from s3 and not github for csv later
      #add credential section for github
      #need secrets manager
      #IAM roles for EC2 instance secret manager
      #IAM roles for EC2 instance S3
      #IAM roles for S3 to grab from EC2 instance
      #add statement to prevent delete of S3 bucket
      #cloudwatch logs if error
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          yum install awscli -y
          aws s3 cp 
          wget https://github.com/dconroybeam/CSM-Match/blob/e69c72947a5d55c09dd5dc9be6a802712831f3c6/Mock%20Data/CSM%20Match%20Mock%20Data%2020230720%20164351.csv
          run_rscript() {
            wget https://github.com/dconroybeam/CSM-Match/blob/e69c72947a5d55c09dd5dc9be6a802712831f3c6/Mock%20Data/CSM%20Match%20Mock%20Matching%20Script%2020230720.Rmd
            Rscript CSM%20Match%20Mock%20Matching%20Script%2020230720.Rmd CSM%20Match%20Mock%20Data%2020230720%20164351.csv
            current_date=$(date +"%Y.%m.%d")
            current_time=$(date +"%H.%M.%S")
            file_name_base="CSM MATCH Mock Data MATCHED"
            file_name="${file_name_base}_${current_date}_${current_time}.csv"
            if [[ ! -e "$file_name" ]]; then
              run_rscript()
            else
              aws s3 cp "$file_name" s3://csm-match-mock-data-matched/
              aws cloudformation delete-stack --stack-name POCTemplate1
            fi
          }
          run_rscript()
      InstanceType: m1.small
      AvailabilityZone: us-east-1a
      ImageId: ami-0ff8a91507f77f867