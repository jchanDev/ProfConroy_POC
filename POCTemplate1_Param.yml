# following commands that local computer will have to run (in order)
#1. Command to create stack:
# aws cloudformation create-stack --stack-name NewStackName --template-body file://path/to/your/existing-template.yaml --region us-west-2
# 2. Command that will upload local csv file onto existing s3 bucket
# aws s3 cp /path/to/your/csvfile.csv s3://your-existing-bucket-name/csvfile.csv
# local computer will need credentials to run above
# template plans:
# 1. contains services that will run once and will stay; includes: output s3 bucket, security group, iam roles, input bucket
# 2. contains services that will run everytime; includes: ec2 instance
# to-do:
#EC2 launch role
#add a security group
#vpc and subnet id
#service catalog vpc
#multiple parameters
#parameters use default or json file in CLI
# order of launch:
# roles, buckets, bucket policy, lambda function

# Parameters:
#   InputBucketName:
#     Type: String
#     Default: csm-match-mock-data
#     Description: Name of the input bucket
  
#   OutputBucketName:
#     Type: String
#     Default: csm-match-mock-data-matched
#     Description: Name of the output bucket
Parameters:
  InputBucketName:
    Type: String
    Default: csm-match-mock-data
    Description: Name of the input bucket
  
  OutputBucketName:
    Type: String
    Default: csm-match-mock-data-matched
    Description: Name of the output bucket

Resources:
  # Bucket policies and IAM roles
  InputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    # DependsOn: InputS3BucketPOC2023
    Properties:
      Bucket: !Ref InputS3BucketPOC2023
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${InputBucketName}/*
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com

  OutputS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    # DependsOn: OutputS3BucketPOC2023
    Properties:
      Bucket: !Ref OutputS3BucketPOC2023
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: 
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${OutputBucketName}/*
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com

  EC2InstanceRole:
    Type: AWS::IAM::Role
    # DependsOn: 
    #   - InputS3BucketPOC2023
    #   - OutputS3BucketPOC2023
    Properties:
      RoleName: EC2-Instance-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AWSCloudTrail_FullAccess
      Policies:
        - PolicyName: EC2S3AccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub arn:aws:s3:::${InputBucketName}/*
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::${OutputBucketName}/*
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                Resource: "*"

  LaunchLambdaRole:
    Type: AWS::IAM::Role
    # DependsOn: 
    #   - InputS3BucketPOC2023
    #   - OutputS3BucketPOC2023
    Properties:
      RoleName: Lambda-Execution-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
      Policies:
        - PolicyName: LambdaLaunchPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketNotification
                Resource:
                  - !Sub arn:aws:s3:::${InputBucketName}/*
                  - arn:aws:s3:::lambda-store-bucket-poc-2023/*
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                Resource: "*"
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::${OutputBucketName}/*
        - PolicyName: LaunchTemplate2Policy
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeSecurityGroups
                Resource: "*"
                Effect: Allow
                Sid: VisualEditor0
              - Action:
                  - ec2:RebootInstances
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:TerminateInstances
                  - ec2:DeleteTags
                  - ec2:MonitorInstances
                  - ec2:CreateTags
                  - ec2:RunInstances
                  - ec2:StopInstances
                  - ec2:StartInstances
                  - ec2:CreateSecurityGroup
                  - ec2:AssociateSubnetCidrBlock
                  - ec2:ApplySecurityGroupsToClientVpnTargetNetwork
                  - ec2:AssociateIamInstanceProfile
                Resource:
                  - arn:aws:ec2:*:804665673296:transit-gateway-multicast-domain/*
                  - arn:aws:ec2:*:804665673296:vpn-connection/*
                  - arn:aws:ec2:*:804665673296:capacity-reservation/*
                  - arn:aws:ec2:*:804665673296:prefix-list/*
                  - arn:aws:ec2:*:804665673296:launch-template/*
                  - arn:aws:ec2:*:804665673296:internet-gateway/*
                  - arn:aws:ec2:*:804665673296:vpc-endpoint/*
                  - arn:aws:ec2:*:804665673296:network-acl/*
                  - arn:aws:ec2:*:804665673296:traffic-mirror-filter/*
                  - arn:aws:ec2:*:804665673296:security-group-rule/*
                  - arn:aws:ec2:*:804665673296:vpc/*
                  - arn:aws:ec2::804665673296:ipam/*
                  - arn:aws:ec2:*:804665673296:transit-gateway-attachment/*
                  - arn:aws:ec2:*:804665673296:fleet/*
                  - arn:aws:ec2:*:804665673296:natgateway/*
                  - arn:aws:ec2:*:804665673296:dedicated-host/*
                  - arn:aws:ec2:*:804665673296:capacity-reservation-fleet/*
                  - arn:aws:ec2:*:804665673296:local-gateway-route-table-virtual-interface-group-association/*
                  - arn:aws:ec2:*:804665673296:route-table/*
                  - arn:aws:ec2:*:804665673296:verified-access-group/*
                  - arn:aws:ec2:*:804665673296:fpga-image/*
                  - arn:aws:ec2:*:804665673296:elastic-ip/*
                  - arn:aws:ec2:*:804665673296:network-interface/*
                  - arn:aws:ec2:*:804665673296:dhcp-options/*
                  - arn:aws:ec2:*:804665673296:vpn-gateway/*
                  - arn:aws:ec2:*:804665673296:key-pair/*
                  - arn:aws:ec2:*:804665673296:local-gateway-route-table-vpc-association/*
                  - arn:aws:ec2:*:804665673296:local-gateway/*
                  - arn:aws:ec2::804665673296:ipam-pool/*
                  - arn:aws:ec2:*:804665673296:volume/*
                  - arn:aws:ec2::804665673296:ipam-resource-discovery/*
                  - arn:aws:ec2:*:804665673296:traffic-mirror-session/*
                  - arn:aws:ec2:*:804665673296:placement-group/*
                  - arn:aws:ec2:*:804665673296:instance/*
                  - arn:aws:ec2::804665673296:ipam-resource-discovery-association/*
                  - arn:aws:ec2:*:804665673296:security-group/*
                  - arn:aws:ec2:*:804665673296:local-gateway-route-table/*
                  - arn:aws:ec2:*:804665673296:replace-root-volume-task/*
                  - arn:aws:ec2:*:804665673296:local-gateway-virtual-interface-group/*
                  - arn:aws:ec2:*:804665673296:transit-gateway-connect-peer/*
                  - arn:aws:ec2:*:804665673296:subnet/*
                  - arn:aws:ec2:*:804665673296:network-insights-access-scope-analysis/*
                  - arn:aws:ec2:*::snapshot/*
                  - arn:aws:ec2:*:804665673296:instance-event-window/*
                  - arn:aws:ec2:*:804665673296:export-image-task/*
                  - arn:aws:ec2:*:804665673296:spot-fleet-request/*
                  - arn:aws:ec2:*:804665673296:import-snapshot-task/*
                  - arn:aws:ec2:*:804665673296:client-vpn-endpoint/*
                  - arn:aws:ec2:*:804665673296:vpc-peering-connection/*
                  - arn:aws:ec2:*:804665673296:transit-gateway/*
                  - arn:aws:ec2:*:804665673296:transit-gateway-route-table-announcement/*
                  - arn:aws:ec2:*:804665673296:export-instance-task/*
                  - arn:aws:ec2:*:804665673296:verified-access-instance/*
                  - arn:aws:ec2:*:804665673296:instance-connect-endpoint/*
                  - arn:aws:ec2:*:804665673296:carrier-gateway/*
                  - arn:aws:ec2:*::image/*
                  - arn:aws:ec2:*:804665673296:ipv4pool-ec2/*
                  - arn:aws:ec2:*:804665673296:network-insights-analysis/*
                  - arn:aws:ec2:*:804665673296:import-image-task/*
                  - arn:aws:ec2:*:804665673296:transit-gateway-route-table/*
                  - arn:aws:ec2:*:804665673296:verified-access-trust-provider/*
                  - arn:aws:ec2:*:804665673296:network-insights-path/*
                  - arn:aws:ec2:*:804665673296:vpc-flow-log/*
                  - arn:aws:ec2:*:804665673296:spot-instances-request/*
                  - arn:aws:ec2:*:804665673296:network-insights-access-scope/*
                  - arn:aws:ec2:*:804665673296:transit-gateway-policy-table/*
                  - arn:aws:ec2:*:804665673296:vpc-endpoint-service/*
                  - arn:aws:ec2:*:804665673296:traffic-mirror-target/*
                  - arn:aws:ec2:*:804665673296:coip-pool/*
                  - arn:aws:ec2:*:804665673296:reserved-instances/*
                  - arn:aws:ec2:*:804665673296:customer-gateway/*
                  - arn:aws:ec2:*:804665673296:verified-access-endpoint/*
                  - arn:aws:ec2:*:804665673296:egress-only-internet-gateway/*
                  - arn:aws:ec2::804665673296:ipam-scope/*
                Effect: Allow
                Sid: VisualEditor1
              - Action:
                  - iam:CreateInstanceProfile
                  - iam:PassRole
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - iam:UntagInstanceProfile
                  - iam:AddRoleToInstanceProfile
                  - iam:TagInstanceProfile
                Resource:
                  - arn:aws:iam::804665673296:role/*
                  - arn:aws:iam::804665673296:instance-profile/*
                  - arn:aws:secretsmanager:*:804665673296:secret:*
                Effect: Allow
                Sid: VisualEditor2

  DeleteLambdaRole:
    Type: AWS::IAM::Role
    # DependsOn: OutputS3BucketPOC2023
    Properties:
      RoleName: Lambda-Deletion-Role-POC-US-WEST-2
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:ListTopics
                  - sns:GetTopicAttributes
                Resource: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProfConroyEmailSNS}
        - PolicyName: LambdaDeletePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Action: 
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:GetBucketNotification
                Resource: !Sub arn:aws:s3:::${OutputBucketName}/*
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DeleteStack
                Resource: "*"
        - PolicyName: DeleteTemplate2Policy
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:DescribeInstances
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSecurityGroupRules
                  - ec2:DescribeSecurityGroupReferences
                  - ec2:DescribeInstanceTypes
                  - ec2:DescribeInstanceStatus
                  - ec2:UnmonitorInstances
                  - ec2:TerminateInstances
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DeleteSecurityGroup
                  - ec2:ModifySecurityGroupRules
                  - ec2:StopInstances
                Resource: '*' # wildcard avoided perm issue (use tags)
                Effect: Allow
                Sid: VisualEditor0
              - Action:
                  - iam:DeleteInstanceProfile
                  - iam:GetInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:UntagInstanceProfile
                Resource: arn:aws:iam::804665673296:instance-profile/*
                Effect: Allow
                Sid: VisualEditor1
  ProfConroyEmailSNS:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ProfConroyEmailSNS
      DisplayName: ProfConroyEmailSNS
  ProfConroyEmailSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref ProfConroyEmailSNS
      Endpoint: jchan975@ucsb.edu
  # lambda functions
  LambdaLaunchFunction:
    Type: AWS::Lambda::Function
    DependsOn: LaunchLambdaRole
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def lambda_handler(event, context):
              
              # Parse event data
              s3_event = event['Records'][0]['s3']
              print(s3_event)
              bucket_name = s3_event['bucket']['name']
              print(bucket_name)
              object_key = s3_event['object']['key']
              print(object_key)
              # Specify the CloudFormation template URL
              cloudformation_template_url = "https://lambda-store-bucket-poc-2023.s3.us-west-2.amazonaws.com/POCTemplate2AmazonLinux.yml"
              # Launch CloudFormation stack
              cloudformation_client = boto3.client('cloudformation')
              response = cloudformation_client.create_stack(
                  StackName='POCTemplate2AmazonLinux',
                  TemplateURL=cloudformation_template_url,
                  Capabilities=['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM'],
                  OnFailure='DO_NOTHING'
              )
              return {
                  'statusCode': 200,
                  'body': 'Stack creation initiated'
              }
      Handler: index.lambda_handler
      Role: !GetAtt LaunchLambdaRole.Arn
      Runtime: python3.11 

  LambdaDeleteFunction:
    Type: AWS::Lambda::Function
    DependsOn: DeleteLambdaRole
    Properties:
      Environment:
        Variables:
          OutputBucketName:
            Ref: OutputBucketName
          EmailSNS:
            Ref: ProfConroyEmailSNS
          # EmailSNS: !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProfConroyEmailSNS}

      Code:
        ZipFile: !Sub |
          import os
          import boto3
          def lambda_handler(event, context):
            # send email with link to user
            cloudformation_client = boto3.client('cloudformation')
            sns_client = boto3.client('sns')
            s3_client = boto3.client('s3')
            outputBucketName = os.environ['OutputBucketName']
            emailSNS = os.environ['EmailSNS']
            print(outputBucketName)
            object_key = event['Records'][0]['s3']['object']['key']
            expiration_time = 2 * 86400 # 2 days in seconds
            presigned_url = s3_client.generate_presigned_url(
              'get_object',
              Params={'Bucket': outputBucketName, 'Key': object_key},
              ExpiresIn=expiration_time
            )
            sns_subject = 'Your output file is ready'
            sns_message = 'Your output file is ready. Please download it from the following link: ' + presigned_url

            sns_client.publish(
              TopicArn=emailSNS,
              Subject=sns_subject,
              Message=sns_message
            )
              
            # delete CloudFormation stack
            response = cloudformation_client.delete_stack(StackName= "POCTemplate2AmazonLinux")
            return {
                'statusCode': 200,
                'body': 'Stack deletion initiated for POCTemplate2AmazonLinux and SNS message sent'
            }
      Handler: index.lambda_handler
      Role: !GetAtt DeleteLambdaRole.Arn
      Runtime: python3.11 

  LambdaLaunchS3Permission:
    Type: AWS::Lambda::Permission
    # DependsOn: LambdaLaunchFunction
    Properties:
      FunctionName: !GetAtt LambdaLaunchFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: "arn:aws:s3:::*"

  LambdaDeleteS3Permission:
    Type: AWS::Lambda::Permission
    # DependsOn: LambdaDeleteFunction
    Properties:
      FunctionName: !GetAtt LambdaDeleteFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: "arn:aws:s3:::*"
      
  # S3 buckets (input and output)
  InputS3BucketPOC2023: # have object (csv file) delete after we get output csv in output bucket
    Type: AWS::S3::Bucket
    DependsOn: LambdaLaunchS3Permission
    Properties:
        BucketName: !Ref InputBucketName
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Filter:
                S3Key:
                  Rules:
                    - Name: suffix
                      Value: ".csv"
              Function: !GetAtt LambdaLaunchFunction.Arn

  OutputS3BucketPOC2023:
    Type: AWS::S3::Bucket
    DependsOn: LambdaDeleteS3Permission
    Properties:
      BucketName: !Ref OutputBucketName
      LifecycleConfiguration:
        Rules:
          - Id: Retain3Days
            Status: Enabled
            ExpirationInDays: 3
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .csv
            Function: !GetAtt LambdaDeleteFunction.Arn